// Quick Sort : partition and Pivot

/*

9 -3 5 2 6 8 -6 1 3    so we make part the last number then select numbers lass than 3 to the left and greather than 3 in the right 
-3 2 -6 1    3     8 5 9 6

-3 -6  1  2     5 6  9 8

-6 -3 1 2 3 5 6 8 9

*/

using System;
using System.Collections.Generic;

class QuickSort
{
    public static void Main(string[] args)
    {
        int[] a = { 9, -3, 5, 2, 6, 8, -6, 1, 3 };

        // Initialize left and right indices
        int left = 0;
        int right = a.Length - 1;

        // Perform QuickSort
        quickSort(a, left, right);

        // Print the sorted array
        Console.WriteLine("Sorted Array:");
        foreach (int i in a)
        {
            Console.Write(i + " ");
        }
    }

    static int Partition(int[] arr, int left, int right)
    {
        int pivot = arr[left];
        while (true)
        {
            while (arr[left] < pivot)
            {
                left++;
            }

            while (arr[right] > pivot)
            {
                right--;
            }

            if (left < right)
            {
                if (arr[left] == arr[right])
                    return right;

                // Swap elements
                int temp = arr[left];
                arr[left] = arr[right];
                arr[right] = temp;
            }
            else
            {
                return right;
            }
        }
    }

    static void quickSort(int[] arr, int left, int right)
    {
        if (left < right)
        {
            int pivot = Partition(arr, left, right);
            if (pivot > 1)
            {
                quickSort(arr, left, pivot - 1);
            }
            if (pivot + 1 < right)
            {
                quickSort(arr, pivot + 1, right);
            }
        }
    }
}
